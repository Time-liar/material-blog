<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Nginx在Linux下的安装</title>
      <link href="/2017/09/06/Nginx%E5%9C%A8Linux%E4%B8%8B%E7%9A%84%E5%AE%89%E8%A3%85/"/>
      <url>/2017/09/06/Nginx%E5%9C%A8Linux%E4%B8%8B%E7%9A%84%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p>本文使用的环境是Ubuntu 17.10，其他发行版对于本文中的操作并没有什么影响</p><a id="more"></a><h2 id="Nginx安装-（具体版本按需选择）"><a href="#Nginx安装-（具体版本按需选择）" class="headerlink" title="Nginx安装 （具体版本按需选择）"></a>Nginx安装 （具体版本按需选择）</h2><h3 id="基础源码包下载"><a href="#基础源码包下载" class="headerlink" title="基础源码包下载"></a>基础源码包下载</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">wget</span> <span class="token string">"https://nginx.org/download/nginx-1.13.5.tar.gz"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><small>养成<code>wget</code>加引号的习惯，可避免很多问题</small></p><h3 id="基础依赖包-zlib-amp-pcre"><a href="#基础依赖包-zlib-amp-pcre" class="headerlink" title="基础依赖包 zlib &amp; pcre"></a>基础依赖包 zlib &amp; pcre</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">wget</span> <span class="token string">"ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.41.zip"</span><span class="token function">wget</span> <span class="token string">"http://nginx.org/download/zlib-1.2.11.tar.gz"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>PCRE用来支持rewrite模块</p><h2 id="模块选择（可选）"><a href="#模块选择（可选）" class="headerlink" title="模块选择（可选）"></a>模块选择（可选）</h2><h3 id="Fancy-Index-（基本不需要）"><a href="#Fancy-Index-（基本不需要）" class="headerlink" title="Fancy Index （基本不需要）"></a>Fancy Index （基本不需要）</h3><p>该模块是使用Nginx作为文件服务器时美化目录索引用，按兴趣加</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/aperezdc/ngx-fancyindex.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>待编译时用</p><h3 id="LuaJIT-（比较重要）"><a href="#LuaJIT-（比较重要）" class="headerlink" title="LuaJIT （比较重要）"></a>LuaJIT （比较重要）</h3><p>LuaJIT是C写成的Lua解释器，速度比Lua解释器快十倍左右，JIT名词解释见维基百科<a href="https://zh.wikipedia.org/wiki/%E5%8D%B3%E6%99%82%E7%B7%A8%E8%AD%AF" target="_blank" rel="noopener">传送门</a><br>官方安装方式 <a href="https://github.com/openresty/lua-nginx-module#installation" target="_blank" rel="noopener">传送门</a></p><h4 id="本地先安装LuaJIT"><a href="#本地先安装LuaJIT" class="headerlink" title="本地先安装LuaJIT"></a>本地先安装LuaJIT</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">wget</span> <span class="token string">"http://luajit.org/download/LuaJIT-2.0.5.tar.gz"</span><span class="token function">wget</span> <span class="token string">"https://github.com/openresty/lua-nginx-module/archive/v0.10.10.zip"</span> -O lua-nginx-module-0.10.10.zip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>先构建LuaJIT，<a href="https://asciinema.org/a/136488" target="_blank" rel="noopener">视频传送门</a><br>然后等待Nginx构建</p><h2 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h2><p>实现需要安装gcc,g++,make，否则无编译器<br>先配置</p><pre class="line-numbers language-bash"><code class="language-bash">./configure \    --with-http_ssl_module \ <span class="token comment" spellcheck="true">## 需要事先安装openssl,否则需要指定ssl源码目录  </span>    --with-pcre<span class="token operator">=</span><span class="token punctuation">..</span>/pcre-8.41 \    --with-zlib<span class="token operator">=</span><span class="token punctuation">..</span>/zlib-1.2.11 \    --add-module<span class="token operator">=</span><span class="token punctuation">..</span>/ngx-fancyindex \  <span class="token comment" spellcheck="true">## 可选插件</span>    --sbin-path<span class="token operator">=</span>/usr/local/nginx/nginx \    --conf-path<span class="token operator">=</span>/etc/nginx/nginx.conf \  <span class="token comment" spellcheck="true">## 指定配置文件位置，默认为nginx所在目录</span>    --pid-path<span class="token operator">=</span>/usr/local/nginx/nginx.pid \    --add-module<span class="token operator">=</span>/data/src/lua-nginx-module-0.10.10 <span class="token comment" spellcheck="true">## lua模块</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>其中的各种path请自己指定</strong><br>执行以上过程检查是否有错误，有错误请请教Google和StackOverflow<br>若无错误，即可开始构建</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>构建完成直接使用<code>nginx</code>来运行nginx，如果出现<code>command not found</code> ，可用<code>ln -s /path/to/nginx/nginx /sbin/</code>将nginx软链到sbin下</p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><pre class="line-numbers language-bash"><code class="language-bash">curl http://127.0.0.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>出现200则安装成功</p><p>./configure <br>    –with-http_ssl_module \<br>    –with-pcre=../pcre-8.41 <br>    –with-zlib=../zlib-1.2.11 <br>    –add-module=../ngx-fancyindex \<br>    –sbin-path=/usr/local/nginx/nginx <br>    –conf-path=/etc/nginx/nginx.conf \<br>    –pid-path=/usr/local/nginx/nginx.pid <br>    –add-module=/data/src/lua-nginx-module-0.10.10 </p>]]></content>
      
      
      <categories>
          
          <category> Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于匿名内部类的坑</title>
      <link href="/2017/03/13/%E5%85%B3%E4%BA%8E%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB%E7%9A%84%E5%9D%91/"/>
      <url>/2017/03/13/%E5%85%B3%E4%BA%8E%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB%E7%9A%84%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>有一种初始化方法，写起来很爽，比如这样：</p><pre class="line-numbers language-java"><code class="language-java">Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">{</span>    <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"timeliar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"timeliar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><a id="more"></a><p>** 这种写法千万注意，会造成内存泄露，原因以下再说 **</p><p>然而这种写法有坑，坑来自Java基础的不扎实。<br>原本天真的以为，这种写法是直接初始化一个类，然后直接调用对象的方法。<br>但是用反射提取字段信息的时候，出现了问题</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IllegalAccessException <span class="token punctuation">{</span>    BarUserLink link <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BarUserLink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">{</span>            <span class="token function">setBarId</span><span class="token punctuation">(</span>1L<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setUserId</span><span class="token punctuation">(</span>1L<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    BarUserLink link1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BarUserLink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    link<span class="token punctuation">.</span><span class="token function">setBarId</span><span class="token punctuation">(</span>1L<span class="token punctuation">)</span><span class="token punctuation">;</span>    link<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span>1L<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"匿名内部类反射取字段"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Field<span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> link<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Field field <span class="token operator">:</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>        field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" ==> "</span> <span class="token operator">+</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正常new对象反射取字段"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fields <span class="token operator">=</span> link1<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Field field <span class="token operator">:</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>        field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" ==> "</span> <span class="token operator">+</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre><code>匿名内部类反射取字段this$0 ==&gt; date.timeliar.graduation.web.TestQuickInit@27abe2cd正常new对象反射取字段barId ==&gt; 1userId ==&gt; 1</code></pre><h1 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h1><p>查阅了相关资料(主要是Google)之后，尝试得出一个结论，这种写法返回的其实是一个继承了该类的匿名内部类，<br>实验检验：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">innerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    BarUserLink link <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BarUserLink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this -> "</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"super -> "</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre><code>this -&gt; class date.timeliar.graduation.web.TestQuickInit$4super -&gt; class date.timeliar.graduation.web.model.po.BarUserLink</code></pre><p>真相大白，初始化的时候两个大括号的意义也明了了，外部括号是定义了类边界，内部的是普通代码块，作为作用域。</p><p>** 因为是内部类，所以返回出对象之后，如果该对象被一直使用，那么外部类的对象将不会被会回收，这就造成了内存泄露 **<br>** 返回的本质是一个继承了所需要类的内部类，虽然是子类，但是并不能代表父类的一切，比如反射取字段的时候 **</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Let&#39;s Encrypt签署免费SSL证书</title>
      <link href="/2017/03/11/%E4%BD%BF%E7%94%A8Let-s-Encrypt%E7%AD%BE%E7%BD%B2%E5%85%8D%E8%B4%B9SSL%E8%AF%81%E4%B9%A6/"/>
      <url>/2017/03/11/%E4%BD%BF%E7%94%A8Let-s-Encrypt%E7%AD%BE%E7%BD%B2%E5%85%8D%E8%B4%B9SSL%E8%AF%81%E4%B9%A6/</url>
      
        <content type="html"><![CDATA[<p>本文操作在Linux操作系统下完成，需要Python和Nginx</p><a id="more"></a><blockquote><p>超文本传输安全协议（英语：Hypertext Transfer Protocol Secure，缩写：HTTPS，常称为HTTP over TLS，HTTP over SSL或HTTP Secure）是一种网络安全传输协议。在计算机网络上，HTTPS经由超文本传输协议进行通信，但利用SSL/TLS来加密数据包。HTTPS开发的主要目的，是提供对网络服务器的身份认证，保护交换数据的隐私与完整性。这个协议由网景公司（Netscape）在1994年首次提出，随后扩展到互联网上。<br>HTTPS连接经常用于万维网上的交易支付和企业信息系统中敏感信息的传输。HTTPS不应与在 RFC 2660 中定义的安全超文本传输协议（S-HTTP）相混淆。</p></blockquote><p>以上引用自维基百科关于<a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE" target="_blank" rel="noopener">Https</a>的解释<br>关于Https的详细信息网上都有，请查阅<a href="https://zh.wikipedia.org" target="_blank" rel="noopener">维基百科</a>和<a href="https://www.google.com" target="_blank" rel="noopener">Google</a></p><p>本文签发Https证书的机构为<a href="https://letsencrypt.org/" target="_blank" rel="noopener">Let’s Encrypt</a>(以下简称为LE), 该组织旨在消除当前手动创建和安装证书的复杂过程的自动化流程，为安全网站提供免费的SSL/TLS证书。</p><h2 id="流程开始"><a href="#流程开始" class="headerlink" title="流程开始"></a>流程开始</h2><h3 id="注册Let’s-Encrypt账户-account-key"><a href="#注册Let’s-Encrypt账户-account-key" class="headerlink" title="注册Let’s Encrypt账户(account.key)"></a>注册Let’s Encrypt账户(account.key)</h3><p>account.key为LE用来识别你身份(相当于账户)的RSA key，使用<code>openssl</code>生成</p><pre class="line-numbers language-Bash"><code class="language-Bash">openssl genrsa 4096 > account.key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="创建CSR文件"><a href="#创建CSR文件" class="headerlink" title="创建CSR文件"></a>创建CSR文件</h3><p>LE和<a href="https://github.com/ietf-wg-acme/acme/" target="_blank" rel="noopener">ACME协议</a>旨在配置一个自动化的，不需要人为干涉<br>即可以获得浏览器信任证书的Https服务器，该功能是通过服务器上运行一个证书管理代理程序(Certificate Management Agent)来实现的，该程序首先需要一个域名的<a href="https://en.wikipedia.org/wiki/Certificate_signing_request" target="_blank" rel="noopener">证书签名请求文件(Certificate Signing Request, CSR)</a>，然后将该文件递交给LE进行签发。<br>首先生成<code>domain.key</code>文件来作为域名的身份凭证</p><pre class="line-numbers language-bash"><code class="language-bash">openssl genrsa 4096 <span class="token operator">></span> domain.key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>切记不可使用account.key来作为domain.key</strong><br>然后生成CSR文件</p><pre class="line-numbers language-bash"><code class="language-bash">openssl req -new -sha256 -key domain.key -subj <span class="token string">"/"</span> -reqexts SAN -config <span class="token operator">&lt;</span><span class="token punctuation">(</span>cat /etc/ssl/openssl.cnf <span class="token operator">&lt;</span><span class="token punctuation">(</span>printf <span class="token string">"[SAN]\nsubjectAltName=DNS:{domain1},DNS:{domain2}"</span><span class="token punctuation">))</span> <span class="token operator">></span> domain.csr<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将{domain1},{domain2}替换成自己的域名即可，比如<code>timeliar.date</code>,<code>blog.timeliar.date</code>，可添加多个，以逗号分隔，写成<code>DNS:domain</code>的格式即可。<br><small>提示/etc/ssl/openssl.cnf找不到的话请自行google:can not open /etc/ssl/openssl.cnf，路径有可能是/usr/local/ssl/openssl.cnf，这个取决于openssl是如何安装的</small></p><h3 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h3><p>LE想给你域名签发证书首先得确定域名可用，并且域名是你的。</p><ul><li><p>首先创建一个写入临时文件的目录，如<code>/var/www/le</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">mkdir</span> -p /var/www/le<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>修改Nginx配置文件，添加一个virtual server</p><pre class="line-numbers language-nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">{</span>      <span class="token keyword">listen</span> <span class="token number">80</span><span class="token punctuation">;</span>      <span class="token keyword">location</span> <span class="token operator">^</span><span class="token operator">~</span> <span class="token operator">/</span><span class="token punctuation">.</span>well<span class="token operator">-</span>known<span class="token operator">/</span>acme<span class="token operator">-</span>challenge<span class="token operator">/</span> <span class="token punctuation">{</span>        <span class="token keyword">alias</span> <span class="token operator">/</span>var<span class="token operator">/</span>www<span class="token operator">/</span>le<span class="token operator">/</span><span class="token punctuation">;</span>        <span class="token keyword">try_files</span> <span class="token variable">$uri</span> <span class="token operator">=</span><span class="token number">404</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>path <code>/.well-known/acme-challenge/</code>为LE固定访问URI，请不要修改</p></li><li><p>启动nginx</p><pre class="line-numbers language-bash"><code class="language-bash">nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>开始认证</p><pre class="line-numbers language-bash"><code class="language-bash">python acme_tiny.py \        --account-key account.key \        --csr domain.csr \        --acme-dir /var/www/le/ <span class="token operator">></span> \        signed.crt<span class="token comment" spellcheck="true"># 获取LE中见证书</span><span class="token function">wget</span> -O - https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem <span class="token operator">></span> intermediate.pem<span class="token comment" spellcheck="true"># 将le的中间证书和生成的证书组合成证书链</span><span class="token function">cat</span> ./signed.crt ./intermediate.pem <span class="token operator">></span> ./chained.pem<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>** 认证过程中py脚本会对提供的本机目录<code>/var/www/le</code>里写文件，然后通过访问<code>{domain}/.well-known/acme-challenge/{文件名}</code>来校验域名是否可用 **</p></li></ul><h3 id="生成dhparam"><a href="#生成dhparam" class="headerlink" title="生成dhparam"></a>生成dhparam</h3><p>前段时间Google完成了SHA-1的碰撞实验(<a href="http://www.infoq.com/cn/news/2017/02/google-first-sha1-collision" target="_blank" rel="noopener">Google宣布攻破SHA-1，从此SHA-1不再安全</a>)，是时候该抛弃SHA-1了，这里使用了<a href="https://zh.wikipedia.org/wiki/%E8%BF%AA%E8%8F%B2-%E8%B5%AB%E7%88%BE%E6%9B%BC%E5%AF%86%E9%91%B0%E4%BA%A4%E6%8F%9B" target="_blank" rel="noopener">迪菲-赫尔曼密钥交换</a>协议，具体讲解请看wikipedia</p><pre class="line-numbers language-bash"><code class="language-bash">openssl dhparam -out dhparam.pem 2048<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h3><p>将生成的<code>chained.pem</code>配置到Nginx中</p><pre class="line-numbers language-shell"><code class="language-shell">ssl on;ssl_certificate /path/to/chained.pem;ssl_certificate_key /path/to/domain.key;ssl_dhparam /path/to/dhparam.pem;ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';ssl_prefer_server_ciphers  on;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后开始使用吧！<br>但是出于安全考虑，该证书有效期只有90天，到期之后只需要再次进行认证即可，将下列脚本加入<code>crontab</code>，90天运行一次</p><pre class="line-numbers language-bash"><code class="language-bash">python acme_tiny.py \        --account-key account.key \        --csr domain.csr \        --acme-dir /var/www/le/ <span class="token operator">></span> \        signed.crt<span class="token function">cat</span> ./signed.crt ./intermediate.pem <span class="token operator">></span> ./chained.pem<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="此外还有一些著名付费Https证书签发机构"><a href="#此外还有一些著名付费Https证书签发机构" class="headerlink" title="此外还有一些著名付费Https证书签发机构"></a>此外还有一些著名付费Https证书签发机构</h2><p>免费的证书认证级别还是还是比较低的，只能起到加密信息的作用，适合做个人网站博客等安全要求不是特别高的。电商站点还是得用认证级别更高的付费证书来防止钓鱼网站</p><ul><li>自行Google吧</li></ul>]]></content>
      
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Https </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>恨恨而死</title>
      <link href="/2016/11/30/%E6%81%A8%E6%81%A8%E8%80%8C%E6%AD%BB/"/>
      <url>/2016/11/30/%E6%81%A8%E6%81%A8%E8%80%8C%E6%AD%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="恨恨而死"><a href="#恨恨而死" class="headerlink" title="恨恨而死"></a>恨恨而死</h1><p><code>作者：鲁迅</code></p><blockquote><p>古来很有几位恨恨而死的人物。他们一面说些“怀才不遇”“天道宁论”的话，一面有钱的便狂嫖滥赌，没钱的便喝几十碗酒，——因为不平的缘故，于是后来就恨恨而死了。</p></blockquote><a id="more"></a><blockquote><p>我们应该趁他们活着的时候问他：诸公!您知道北京离昆仑山几里，弱水去黄河几丈么?火药除了做鞭爆，罗盘除了看风水，还有什么用处么?棉花是红的还是白的?谷子是长在树上，还是长在草上?桑间濮上如何情形，自由恋爱怎样态度?您在半夜里可忽然觉得有些羞，清早上可居然有点悔么?四斤的担，您能挑么?三里的道，您能跑么?</p></blockquote><blockquote><p>他们如果细细的想，慢慢的悔了，这便很有些希望。万一越发不平，越发愤怒，那便“爱莫能助”。——于是他们终于恨恨而死了。</p></blockquote><blockquote><p>中国现在的人心中，不平和愤恨的分子太多了。不平还是改造的引线，但必须先改造了自己，再改造社会，改造世界；万不可单是不平。至于愤恨，却几乎全无用处。</p></blockquote><blockquote><p>愤恨只是恨恨而死的根苗，古人有过许多，我们不要蹈他们的覆辙。</p></blockquote><blockquote><p>我们更不要借了“天下无公理，无人道”这些话，遮盖自暴自弃的行为，自称“恨人”，一副恨恨而死的脸孔，其实并不恨恨而死。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 转载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文章 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux下修改swap扩展内存</title>
      <link href="/2016/08/19/linux%E4%B8%8B%E4%BF%AE%E6%94%B9swap%E6%89%A9%E5%B1%95%E5%86%85%E5%AD%98/"/>
      <url>/2016/08/19/linux%E4%B8%8B%E4%BF%AE%E6%94%B9swap%E6%89%A9%E5%B1%95%E5%86%85%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<p>刚入了一台<a href="https://www.digitalocean.com/" target="_blank" rel="noopener">digital ocean</a>的VPS，1核1G,30G+SSD只要10$,遂在上面跑了一个gitlab，作为个人git仓库，然而启动后出现了502，已检查发现内存不够，原来默认没有分swap（好坑），手动添加一下吧</p><a id="more"></a><h2 id="查看swap分区占用情况"><a href="#查看swap分区占用情况" class="headerlink" title="查看swap分区占用情况"></a>查看swap分区占用情况</h2><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">cat</span> /proc/meminfo <span class="token operator">|</span> <span class="token function">grep</span> SwapSwapCached:            0 kBSwapTotal:             0 kBSwapFree:              0 kB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时Swap分区为空</p><h2 id="查看系统还有多少空间"><a href="#查看系统还有多少空间" class="headerlink" title="查看系统还有多少空间"></a>查看系统还有多少空间</h2><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">df</span> -lhFilesystem      Size  Used Avail Use% Mounted on/dev/vda1        30G  1.8G   27G   7% /none            4.0K     0  4.0K   0% /sys/fs/cgroupudev            493M  4.0K  493M   1% /devtmpfs           100M  316K  100M   1% /runnone            5.0M     0  5.0M   0% /run/locknone            498M   24K  497M   1% /run/shmnone            100M     0  100M   0% /run/user<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时<code>/</code>目录还有27G，可以分</p><h2 id="创建Swap文件"><a href="#创建Swap文件" class="headerlink" title="创建Swap文件"></a>创建Swap文件</h2><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">dd</span> if<span class="token operator">=</span>/dev/zero of<span class="token operator">=</span>/swap.disk bs<span class="token operator">=</span>1m count<span class="token operator">=</span>2k<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>(<a href="javascript:void(0)" title="在类UNI操作系统中,/dev/zero是一个特殊的文件，当你读它的时候，它会提供无限的空字符(NULL,ASCII,NUL,0x00)其中的一个典型用法是用它提供的字符流来覆盖信息，另一个常见用法是产生一个特定大小的空白文件。BSD就是通过mmap把/dev/zero映射到虚地址空间实现共享内存的。可以使用mmap将/dev/zero映射到一个虚拟的内存空间，这个操作的效果等同于使用一段匿名的内存（没有和任何文件相关）。" target="_blank" rel="noopener">/dev/zero</a>)或者</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">sudo</span> fallocate -l 2G /swap.disk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>(<a href="javascript:void(0)" title="dd指令为实际写入硬盘，文件产生速度取决于硬盘读写速度，如果欲产生超大文件，速度很慢如果想让系统认为这里存在一个大文件，而不用具体将空字符写入此处磁盘，则可以使用fallocate，但Docker中该指令失效" target="_blank" rel="noopener">fallocate</a>) <a href="http://man.he.net/?topic=fallocate&section=all" target="_blank" rel="noopener">man page</a><br>此时根目录下生成swap.disk，可设置<code>chmod 600 /swap.disk</code>使swap只能root可读写，保证读写安全</p><h2 id="设置Swap"><a href="#设置Swap" class="headerlink" title="设置Swap"></a>设置Swap</h2><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">sudo</span> mkswap /swap.diskSetting up swapspace version 1, size <span class="token operator">=</span> 2097148 KiBno label, UUID<span class="token operator">=</span>1ba86321-c49d-434c-8c52-741173fb5eab<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="启动Swap"><a href="#启动Swap" class="headerlink" title="启动Swap"></a>启动Swap</h2><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">sudo</span> swapon /swap.disk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在查看内存用量</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">cat</span> /proc/meminfo <span class="token operator">|</span> <span class="token function">grep</span> SwapSwapCached:            0 kBSwapTotal:       2097148 kBSwapFree:        2097148 kB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>已有Swap数据</p><h2 id="设置重启不失效"><a href="#设置重启不失效" class="headerlink" title="设置重启不失效"></a>设置重启不失效</h2><p>上述方法在系统重启后swap会自动不挂载，设置方法为</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token keyword">echo</span> <span class="token string">"/swap.disk   none    swap    sw    0   0"</span> <span class="token operator">>></span> /etc/fstab<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h2><h3 id="设置Swap用量"><a href="#设置Swap用量" class="headerlink" title="设置Swap用量"></a>设置Swap用量</h3><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token keyword">echo</span> <span class="token string">"vm.vfs_cache_pressure = 50"</span> <span class="token operator">>></span> /etc/sysctl.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为了不重启生效，则</p><pre class="line-numbers language-bash"><code class="language-bash">$ sysctl vm.swappiness<span class="token operator">=</span>10<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 备忘录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS顺序插入数组</title>
      <link href="/2016/08/04/JS%E9%A1%BA%E5%BA%8F%E6%8F%92%E5%85%A5%E6%95%B0%E7%BB%84/"/>
      <url>/2016/08/04/JS%E9%A1%BA%E5%BA%8F%E6%8F%92%E5%85%A5%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<p>给一个数组和一个数字，将数字插入数字指定位置，使数组有序，不使用遍历</p><a id="more"></a><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">insert</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> middle <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> right <span class="token operator">=</span> array<span class="token punctuation">.</span>length    <span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;=</span> array<span class="token punctuation">[</span>middle<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            right <span class="token operator">=</span> middle<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            left <span class="token operator">=</span> middle<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        middle <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token punctuation">(</span>right <span class="token operator">+</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    array<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>middle<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 136. Single Number</title>
      <link href="/2016/07/28/LeetCode-136-Single-Number/"/>
      <url>/2016/07/28/LeetCode-136-Single-Number/</url>
      
        <content type="html"><![CDATA[<p>Given an array of integers, every element appears <em>twice</em> except for one. Find that single one.</p><p>大意为给定一个整数数组，数组中除了一个元素只有一个外，其他元素均出现两次，找出一个的这个元素</p><a id="more"></a><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>最初想法将数组每个数扫描进一个集合，没扫进一个元素判断集合中是否已存在，存在则删除集合中的相应元素，否则将元素添加进集合，最后集合中剩下的那个元素则为单个元素</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">singleNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>list<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Integer<span class="token punctuation">)</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>上面的方法虽然能通过测试，但是数据量一大所需内存会很大，运行时间也很慢，所以根据异或运算的规律做出了优化方案</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">planB</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> single <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        single <span class="token operator">^=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> single<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 338. Counting Bits</title>
      <link href="/2016/07/28/LeetCode-338-Counting-Bits/"/>
      <url>/2016/07/28/LeetCode-338-Counting-Bits/</url>
      
        <content type="html"><![CDATA[<p>Given a non negative integer number <strong>num</strong>. For every numbers <strong>i</strong> in the range <strong>0 ≤ i ≤ num</strong> calculate the number of 1’s in their binary representation and return them as an array.</p><p>大意为在给定的一个数字，求对于每一个小于这个数字的非负整数的二进制形式中有多少1。</p><a id="more"></a><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>在二进制运算中有一个基本但是神奇的运算<code>&amp;</code>，与运算的原则是同为1相与则为1，一旦有0相与则为0，</p><p>因此在位运算中有一个神奇的规律，当一个正整数数x与(x-1)相与时，x二进制中的最右端的1则会消去</p><p>如：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token number">010010101</span><span class="token operator">&amp;</span><span class="token number">010010100</span><span class="token operator">=</span><span class="token number">010010100</span><span class="token number">010100100</span><span class="token operator">&amp;</span><span class="token number">010100011</span><span class="token operator">=</span><span class="token number">010100000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由此规律可知，当一个数x与(x-1)相与多次，直到结果为0，则相与次数则为x二进制中1的个数</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">countBits</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ret <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> tmp <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>tmp <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            tmp <span class="token operator">=</span> tmp <span class="token operator">&amp;</span> <span class="token punctuation">(</span>tmp <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ret<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于异或^</title>
      <link href="/2016/07/27/%E5%85%B3%E4%BA%8E%E5%BC%82%E6%88%96/"/>
      <url>/2016/07/27/%E5%85%B3%E4%BA%8E%E5%BC%82%E6%88%96/</url>
      
        <content type="html"><![CDATA[<p>异或为相同为0相异为1</p><a id="more"></a><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token number">010101</span><span class="token operator">^</span><span class="token number">001011</span><span class="token operator">=</span><span class="token number">011110</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h2><pre class="line-numbers language-java"><code class="language-java">a <span class="token operator">^</span> a <span class="token operator">=</span> <span class="token number">0</span>            <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span>幂a <span class="token operator">^</span> b <span class="token operator">=</span> b <span class="token operator">^</span> a            <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span>交换a <span class="token operator">^</span> <span class="token number">0</span> <span class="token operator">=</span> a            <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span>与<span class="token number">0</span>异或a <span class="token operator">^</span> b <span class="token operator">^</span> c <span class="token operator">=</span> a <span class="token operator">^</span> <span class="token punctuation">(</span>b <span class="token operator">^</span> c<span class="token punctuation">)</span>     <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span>结合<span class="token punctuation">(</span>a <span class="token operator">^</span> b <span class="token operator">^</span> c<span class="token punctuation">)</span> <span class="token operator">^</span> c <span class="token operator">=</span> a <span class="token operator">^</span> b     <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span>消去<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="交换两个数"><a href="#交换两个数" class="headerlink" title="交换两个数"></a>交换两个数</h2><pre class="line-numbers language-java"><code class="language-java">a <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>b <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>a <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 377. Combination Sum IV</title>
      <link href="/2016/07/27/LeetCode-377-Combination-Sum-IV/"/>
      <url>/2016/07/27/LeetCode-377-Combination-Sum-IV/</url>
      
        <content type="html"><![CDATA[<p>给定一个正整数数组，找出所有可以相加得到目标正整数的组合</p><a id="more"></a><h2 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h2><pre><code>给定数组:{1,2,3}目标数:4可能情况:    {1,1,1,1}    {1,1,2},{1,2,1},{2,1,1}    {2,2}    {1,3},{3,1}组合数:7</code></pre><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>设目标数<code>i</code>的组合数为<code>dp[i]</code>，可知<code>dp[i] += dp[i] + dp[i-num]</code>，例如本题计算<code>dp[3]</code>时，数组为<code>{1,2,3}</code>，因<code>3</code>可拆分为<code>1+x</code>，此时<code>x</code>则为<code>dp[2]</code>，也可拆为<code>2+x</code>，此时<code>x</code>则为<code>dp[1]</code>，因此，<code>dp[i]=dp[i-nums[0]] + dp[i-nums[1]] + dp[i-nums[2]].......dp[i-nums[nums.length-1]]</code>。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">combinationSum4</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>target <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> target <span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token operator">:</span>nums<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">>=</span> num<span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> num<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MD5相同的两张图</title>
      <link href="/2016/07/21/MD5%E7%9B%B8%E5%90%8C%E7%9A%84%E4%B8%A4%E5%BC%A0%E5%9B%BE/"/>
      <url>/2016/07/21/MD5%E7%9B%B8%E5%90%8C%E7%9A%84%E4%B8%A4%E5%BC%A0%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<p>小概率事件</p><a id="more"></a><h3 id="barry"><a href="#barry" class="headerlink" title="barry"></a>barry</h3><p><img src="https://ohlw52xt6.qnssl.com/barry.jpg" alt="barry"></p><h3 id="james"><a href="#james" class="headerlink" title="james"></a>james</h3><p><img src="https://ohlw52xt6.qnssl.com/james.jpg" alt="james"></p><h3 id="两图片的MD5值"><a href="#两图片的MD5值" class="headerlink" title="两图片的MD5值"></a>两图片的MD5值</h3><p><img src="https://ohlw52xt6.qnssl.com/9213EC5E-F875-4F43-B74A-F7DDDDF849CC.png" alt="md5"></p>]]></content>
      
      
      <categories>
          
          <category> 趣图 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/2016/05/07/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2016/05/07/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>总结基本正则表达式</p><a id="more"></a><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><ul><li>匹配手机号：<code>(\+\d{2})?\s?\d{3}\-?\d{4}\-?\d{4}</code></li><li>匹配邮箱：<code>^[a-zA-Z0-9._%+\-]+@[a-zA-Z0-9.\-]+\.[a-zA-Z]{1,6}$</code></li></ul><p>(暂时没有啦)</p>]]></content>
      
      
      <categories>
          
          <category> 备用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编译原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>错题整理第一弹</title>
      <link href="/2016/05/03/%E9%94%99%E9%A2%98%E6%95%B4%E7%90%86%E7%AC%AC%E4%B8%80%E5%BC%B9/"/>
      <url>/2016/05/03/%E9%94%99%E9%A2%98%E6%95%B4%E7%90%86%E7%AC%AC%E4%B8%80%E5%BC%B9/</url>
      
        <content type="html"><![CDATA[<p>错题整理</p><a id="more"></a><h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><h2 id="下面有关文件系统元数据的描述，说法错误的是？"><a href="#下面有关文件系统元数据的描述，说法错误的是？" class="headerlink" title="下面有关文件系统元数据的描述，说法错误的是？"></a>下面有关文件系统元数据的描述，说法错误的是？</h2><p>A. 元数据指用来描述一个文件的特征的系统数据，诸如访问权限、文件拥有者以及文件数据块的分布信息等等 B. 我们可以使用stat命令来查看文件更多的元数据信息 C. Unix/Linux系统允许，多个文件名指向同一个inode号码 <strong>D. 文件A和文件B的inode号码虽然不一样，但是文件A的内容是文件B的路径。读取文件A时，系统会自动将访问者导向文件B，这是文件A就称为文件B的”硬链接”</strong></p><blockquote><p>我们知道文件都有文件名与数据，这在 Linux 上被分成两个部分：用户数据 (user data) 与元数据 (metadata)。用户数据，即文件数据块 (data block)，数据块是记录文件真实内容的地方；而元数据则是文件的附加属性，如文件大小、创建时间、所有者等信息。在 Linux 中，元数据中的 inode 号（inode 是文件元数据的一部分但其并不包含文件名，inode 号即索引节点号）才是文件的唯一标识而非文件名。文件名仅是为了方便人们的记忆和使用，系统或程序通过 inode 号寻找正确的文件数据块。</p></blockquote><blockquote><p>硬链接 (hard link) 与软链接（又称符号链接，即 soft link 或 symbolic link）。链接为 Linux 系统解决了文件的共享使用，还带来了隐藏文件路径、增加权限安全及节省存储等好处。 若一个 inode 号对应多个文件名，则称这些文件为硬链接。换言之，硬链接就是同一个文件使用了多个别名。 若文件用户数据块中存放的内容是另一文件的路径名的指向，则该文件就是软链接。</p></blockquote><h1 id="java"><a href="#java" class="headerlink" title="java"></a>java</h1><h2 id="what-is-the-result-of-the-following-code"><a href="#what-is-the-result-of-the-following-code" class="headerlink" title="what is the result of the following code?"></a>what is the result of the following code?</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">enum</span> AccountType<span class="token punctuation">{</span>    SAVING<span class="token punctuation">,</span> FIXED<span class="token punctuation">,</span> CURRENT<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">AccountType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>“It is a account type”<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">EnumOne</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>AccountType<span class="token punctuation">.</span>FIXED<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>A. Compiles fine and output is prints”It is a account type”once followed by”FIXED” B. Compiles fine and output is prints”It is a account type”twice followed by”FIXED” <strong>C. Compiles fine and output is prints”It is a account type”thrice followed by”FIXED”</strong> D. Compiles fine and output is prints”It is a account type”four times followed by”FIXED” E. Compilation fails</p><blockquote><p>创建枚举类型要使用 enum 关键字，隐含了所创建的类型都是 java.lang.Enum 类的子类（java.lang.Enum 是一个抽象类）。枚举类型符合通用模式Class Enum</p></blockquote><blockquote><p>而E表示枚举类型的名称。 <strong>枚举类型的每一个值都将映射到 protected Enum(String name, int ordinal) 构造函数中简单来说就是枚举类型中的枚举值都会对应调用一次构造函数</strong><br>本题中三个枚举值，    这里还要特别强调一下，枚举中的构造函数是私有类，也就是无法再外面创建enum<br>枚举值默认static ，AccountType.FIXED使用的是枚举值，没有创建。所以一共就3次。</p></blockquote><h2 id="Which-statement-is-true-for-the-class-java-util-ArrayList"><a href="#Which-statement-is-true-for-the-class-java-util-ArrayList" class="headerlink" title="Which statement is true for the class java.util.ArrayList?"></a>Which statement is true for the class java.util.ArrayList?</h2><p><strong>A. The elements in the collection are ordered.</strong> B. The collection is guaranteed to be immutable. C. The elements in the collection are guaranteed to be unique. D. The elements in the collection are accessed using a unique key.<strong>下标可作为unique key</strong> E. The elements in the collections are guaranteed to be synchronized.</p><blockquote><p>ArrayList就是动态数组，用MSDN中的说法，就是Array的复杂版本，它提供了如下一些好处： 1&gt; 动态的增加和减少元素 2&gt; 实现了ICollection和IList接口 3&gt; 灵活的设置数组的大小</p></blockquote><blockquote><p>Synchronized属性指示当前的ArrayList实例是否支持线程同步，而ArrayList.Synchronized静态方法则会返回一个ArrayList的线程同步的封装。 如果使用非线程同步的实例，那么在多线程访问的时候，需要自己手动调用lock来保持线程同步</p></blockquote><h2 id="关于sleep-和wait-，以下描述错误的一项是（-）"><a href="#关于sleep-和wait-，以下描述错误的一项是（-）" class="headerlink" title="关于sleep()和wait()，以下描述错误的一项是（ ）"></a>关于sleep()和wait()，以下描述错误的一项是（ ）</h2><p>A. sleep是线程类（Thread）的方法，wait是Object类的方法； B. sleep不释放对象锁，wait放弃对象锁 C. sleep暂停线程、但监控状态仍然保持，结束后会自动恢复 <strong>D. wait后进入等待锁定池，只有针对此对象发出notify方法后获得对象锁进入运行状态</strong>(或notifyAll())</p><blockquote><p>sleep是线程类（Thread）的方法，执行此方法会导致当前此线程暂停指定时间，给执行机会给其他线程，但是监控状态依然保持，到时后会自动恢复。调用sleep不会释放对象锁。 wait是Object类的方法，对此对象调用wait方法导致本线程放弃对象锁，进入等待此对象的等待锁定池，只有针对此对象发出notify方法或notifyAll后本线程才获得对象锁进入运行状态</p></blockquote><h2 id="在Java语言中，下列关于字符集编码（Character-set-encoding）和国际化（i18n）的问题，哪些是正确的？"><a href="#在Java语言中，下列关于字符集编码（Character-set-encoding）和国际化（i18n）的问题，哪些是正确的？" class="headerlink" title="在Java语言中，下列关于字符集编码（Character set encoding）和国际化（i18n）的问题，哪些是正确的？"></a>在Java语言中，下列关于字符集编码（Character set encoding）和国际化（i18n）的问题，哪些是正确的？</h2><p>A. 每个中文字符占用2个字节，每个英文字符占用1个字节 B. 假设数据库中的字符是以GBK编码的，那么显示数据库数据的网页也必须是GBK编码的。 <strong>C. Java的char类型，以下UTF-16 Big Endian的方式保存一个字符。</strong> <strong>D. 实现国际化应用常用的手段是利用ResourceBundle类</strong></p><blockquote><p>A 显然是错误的，Java一律采用Unicode编码方式，每个字符无论中文还是英文字符都占用2个字节。 B 也是不正确的，不同的编码之间是可以转换的，通常流程如下： 将字符串S以其自身编码方式分解为字节数组，再将字节数组以你想要输出的编码方式重新编码为字符串。 例：String newUTF8Str = new String(oldGBKStr.getBytes(“GBK”), “UTF8”); C 是正确的。Java虚拟机中通常使用UTF-16的方式保存一个字符 D 也是正确的。ResourceBundle能够依据Local的不同，选择性的读取与Local对应后缀的properties文件，以达到国际化的目的。</p></blockquote><h2 id="下面函数将返回？"><a href="#下面函数将返回？" class="headerlink" title="下面函数将返回？"></a>下面函数将返回？</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">func</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>A. 1 B. 2 <strong>C. 3</strong> D. 编译错误</p><blockquote><p>Try catch finally获取异常错误的结构，try中有两种情况： 1.try中没有异常时，但是有return等跳转语句，这样会引发程序控制流离开当前的try,自动完成finally中资源的释放。 2try中有异常时，catch在获取到异常之前，进行finally执行，接着执行catch中的语句。 由于本题中的finally中有return语句，将try中的return语句覆盖，程序直接跳出。</p></blockquote><h1 id="javaEE"><a href="#javaEE" class="headerlink" title="javaEE"></a>javaEE</h1><h2 id="下面有关jsp中静态include和动态include的区别，说法错误的是？"><a href="#下面有关jsp中静态include和动态include的区别，说法错误的是？" class="headerlink" title="下面有关jsp中静态include和动态include的区别，说法错误的是？"></a>下面有关jsp中静态include和动态include的区别，说法错误的是？</h2><p>A. 动态INCLUDE:用jsp:include动作实现 B. 静态INCLUDE:用include伪码实现，定不会检查所含文件的变化，适用于包含静态页面&lt;%@ include file=”included.htm” %&gt; C. 静态include的结果是把其他jsp引入当前jsp，两者合为一体;动态include的结构是两者独立，直到输出时才合并 <strong>D. 静态include和动态include都可以允许变量同名的冲突.页面设置也可以借用主文件的</strong></p><blockquote><p>动态 INCLUDE 用 jsp:include 动作实现</p></blockquote><blockquote><p>&lt;jsp:include page=”included.jsp” flush=”true”&gt; 它总是会检查所含文件中的变化 , 适合用于包含动态页面 , 并且可以带参数。各个文件分别先编译，然后组合成一个文件。<br>静态 INCLUDE 用 include 伪码实现 , 定不会检查所含文件的变化 , 适用于包含静态页面 &lt;%@ include file=”included.htm” %&gt; 。先将文件的代码被原封不动地加入到了主页面从而合成一个文件，然后再进行翻译，此时不允许有相同的变量。<br>以下是对 include 两种用法的区别 ， 主要有两个方面的不同 ;<br>    一 : 执行时间上 :<br>    &lt;%@ include file=”relativeURI”%&gt; 是在翻译阶段执行<br>    &lt;jsp:include page=”relativeURI” flush=”true”&gt; 在请求处理阶段执行 .<br>    二 : 引入内容的不同 :<br>    &lt;%@ include file=”relativeURI”%&gt;<br>    引入静态文本 (html,jsp), 在 JSP 页面被转化成 servlet 之前和它融和到一起 .<br>    &lt;jsp:include page=”relativeURI” flush=”true”&gt; 引入执行页面或 servlet 所生成的应答文本 .</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 纠错 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven相关</title>
      <link href="/2016/04/18/maven%E7%9B%B8%E5%85%B3/"/>
      <url>/2016/04/18/maven%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<p>maven 用法记录</p><a id="more"></a><h2 id="maven-安装本地jar包"><a href="#maven-安装本地jar包" class="headerlink" title="maven 安装本地jar包"></a>maven 安装本地jar包</h2><pre class="line-numbers language-bash"><code class="language-bash">mvn install:install-file -Dfile<span class="token operator">=</span>jar包的位置 -DgroupId<span class="token operator">=</span>上面的groupId -DartifactId<span class="token operator">=</span>上面的artifactId -Dversion<span class="token operator">=</span>上面的version -Dpackaging<span class="token operator">=</span>jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行此命令可将制定jar包添加至本地maven仓库</p><h2 id="常用maven指令"><a href="#常用maven指令" class="headerlink" title="常用maven指令"></a>常用maven指令</h2><h3 id="compile"><a href="#compile" class="headerlink" title="compile"></a>compile</h3><p>需指定相应编译插件</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${maven-compiler-plugin-version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>${语言等级}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>${语言等级}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoding</span><span class="token punctuation">></span></span>${字符集}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoding</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="package"><a href="#package" class="headerlink" title="package"></a>package</h3><h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><h2 id="maven-tomcat-集成"><a href="#maven-tomcat-集成" class="headerlink" title="maven,tomcat 集成"></a>maven,tomcat 集成</h2><p>在pom.xml中添加响应plugin</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.tomcat.maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 此处需制定tomcat版本 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>tomcat7-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>          <span class="token comment" spellcheck="true">&lt;!-- 注意此处的url,此处用户需要在tomcat conf目录下的tomcat-users.xml中添加manager-script角色 --></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://localhost:8080/manager/text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span>${tomcat管理员}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>${口令}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span><span class="token punctuation">></span></span>/${项目contextPath}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 此处的名字是项目发布的工程名--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在项目目录下执行<code>mvn tomcat7:deploy</code>便可以自动编译打包部署运行，<strong>此处tomcat服务器必须在开启状态下</strong>，重新部署执行<code>mvn tomcat7:redeploy</code>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Hexo + GitHub 博客搭建</title>
      <link href="/2016/03/24/%E5%85%B3%E4%BA%8EHexo-GitHub-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/2016/03/24/%E5%85%B3%E4%BA%8EHexo-GitHub-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>本博客搭建过程</p><a id="more"></a><h2 id="首先先注册Github账号，这个不用多说"><a href="#首先先注册Github账号，这个不用多说" class="headerlink" title="首先先注册Github账号，这个不用多说"></a>首先先注册Github账号，这个不用多说</h2><h2 id="创建Github仓库"><a href="#创建Github仓库" class="headerlink" title="创建Github仓库"></a>创建Github仓库</h2><blockquote><p>{giuhub账户名}.github.io(*注意此处的域名一定得是Github账户名，否则显示404)</p></blockquote><p>  ![创建仓库](<a href="https://ohlw52xt6.qnssl.com/屏幕快照" target="_blank" rel="noopener">https://ohlw52xt6.qnssl.com/屏幕快照</a> 2016-03-25 15.43.16.png)<br>  ![创建仓库](<a href="https://ohlw52xt6.qnssl.com/屏幕快照" target="_blank" rel="noopener">https://ohlw52xt6.qnssl.com/屏幕快照</a> 2016-03-25 15.47.17.png)</p><h2 id="安装NodeJS"><a href="#安装NodeJS" class="headerlink" title="安装NodeJS"></a>安装NodeJS</h2><h3 id="Linux下"><a href="#Linux下" class="headerlink" title="Linux下"></a>Linux下</h3><p>  使用对应的包管理就可，如Ubuntu下<code>apt-get install node</code></p><h3 id="windows下"><a href="#windows下" class="headerlink" title="windows下"></a>windows下</h3><p>  去官网下载安装包直接安装</p><h3 id="OS-X下"><a href="#OS-X下" class="headerlink" title="OS X下"></a>OS X下</h3><p>  可以使用homebrew包管理<code>brew install node</code><br>  或者直接在官网下载安装包</p><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><h3 id="Linux下-1"><a href="#Linux下-1" class="headerlink" title="Linux下"></a>Linux下</h3><p>  使用对应的包管理就可，如Ubuntu下<code>apt-get install git</code></p><h3 id="windows下-1"><a href="#windows下-1" class="headerlink" title="windows下"></a>windows下</h3><p>  去官网下载安装包直接安装</p><h3 id="OS-X下-1"><a href="#OS-X下-1" class="headerlink" title="OS X下"></a>OS X下</h3><p>  可以使用homebrew包管理<code>brew install git</code><br>  或者直接在官网下载安装包</p><h2 id="配置Git"><a href="#配置Git" class="headerlink" title="配置Git"></a>配置Git</h2><pre class="line-numbers language-bash"><code class="language-bash">  $ <span class="token function">git</span> config --global user.name <span class="token string">"git服务器用户名"</span>  $ <span class="token function">git</span> config --global user.email <span class="token string">"git服务器邮箱"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>  然后不需要其他配置，<br>  如果使用普通方法部署博客的话，需在<code>public</code>目录下执行<code>git init</code>，将此目录初始化为git本地仓库<br>  然后使用</p><pre class="line-numbers language-bash"><code class="language-bash">  $ <span class="token function">git</span> remote add origin 远程仓库地址  $ <span class="token function">git</span> add *  $ <span class="token function">git</span> commit -m <span class="token string">"init"</span>  $ <span class="token function">git</span> push origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>  将<code>public</code>中内容推送到git服务器中。</p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><pre class="line-numbers language-bash"><code class="language-bash">  <span class="token function">npm</span> <span class="token function">install</span> hexo-cli -g  <span class="token function">npm</span> <span class="token function">install</span> hexo --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="Hexo-初始化"><a href="#Hexo-初始化" class="headerlink" title="Hexo 初始化"></a>Hexo 初始化</h2><pre class="line-numbers language-bash"><code class="language-bash">  hexo init  <span class="token comment" spellcheck="true">#安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</span>  $ hexo init <span class="token operator">&lt;</span>folder<span class="token operator">></span>  $ <span class="token function">cd</span> <span class="token operator">&lt;</span>folder<span class="token operator">></span>  $ <span class="token function">npm</span> <span class="token function">install</span>  <span class="token comment" spellcheck="true">#新建完成后，指定文件夹的目录如下</span>  <span class="token keyword">.</span>  ├── _config.yml  ├── package.json  ├── scaffolds  ├── scripts  ├── <span class="token function">source</span>  <span class="token operator">|</span>      ├── _drafts  <span class="token operator">|</span>      └── _posts  └── themes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装Hexo插件"><a href="#安装Hexo插件" class="headerlink" title="安装Hexo插件"></a>安装Hexo插件</h2><pre class="line-numbers language-bash"><code class="language-bash">  <span class="token function">npm</span> <span class="token function">install</span> hexo-generator-index --save  <span class="token function">npm</span> <span class="token function">install</span> hexo-generator-archive --save  <span class="token function">npm</span> <span class="token function">install</span> hexo-generator-category --save  <span class="token function">npm</span> <span class="token function">install</span> hexo-generator-tag --save  <span class="token function">npm</span> <span class="token function">install</span> hexo-server --save  <span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save  <span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-heroku --save  <span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-rsync --save  <span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-openshift --save  <span class="token function">npm</span> <span class="token function">install</span> hexo-renderer-marked@0.2 --save  <span class="token function">npm</span> <span class="token function">install</span> hexo-renderer-stylus@0.2 --save  <span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed@1 --save  <span class="token function">npm</span> <span class="token function">install</span> hexo-generator-sitemap@1 --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="之后的工作"><a href="#之后的工作" class="headerlink" title="之后的工作"></a>之后的工作</h2><p>  使用<code>hexo s</code>或者<code>hexo server</code>开启本地服务器进行调试<br>  使用<code>hexo n &quot;文章名&quot;</code>或者<code>hexo new &quot;文章名&quot;</code>惊醒文章书写，格式使用markdown<br>  使用<code>hexo g</code>或者<code>hexo generate</code>进行构建，将md文件解释成HTML</p><h2 id="部署github"><a href="#部署github" class="headerlink" title="部署github"></a>部署github</h2><p>  普通方法为将<code>Public</code>目录里的直接push进github建立的仓库里<br>  或者<br>  编辑站点根目录下的<code>_config.yml</code>，添加</p><pre class="line-numbers language-yaml"><code class="language-yaml">  <span class="token key atrule">deploy</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> git    <span class="token key atrule">repo</span><span class="token punctuation">:</span> github仓库地址    <span class="token key atrule">branch</span><span class="token punctuation">:</span> 分支（以前版本强制要求gh<span class="token punctuation">-</span>pages分支，如今master分支亲测有效）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>  部署完成之后直接访问<code>http://{用户名}.github.io</code>即可访问搭建的博客，github可能会有延迟，部署之后无论是否成功，github都会发送一封通知邮件</p><h2 id="绑定自定义域名"><a href="#绑定自定义域名" class="headerlink" title="绑定自定义域名"></a>绑定自定义域名</h2><p>  首先到域名提供商购买域名，一般一个<code>.com</code>域名价格在<code>40~60</code>左右，国内推荐<a href="https://wanwang.aliyun.com/" target="_blank" rel="noopener">万网</a>，主要是域名备案比较快（国外域名提供商不知是否需要备案······），域名买完之后解析<a href="http://baike.baidu.com/view/552919.htm" target="_blank" rel="noopener">CNAME</a>记录到<code>{用户名}.github.io.</code>上，<strong>注意<code>github.io</code>后面的<code>.</code>很重要</strong>，同时在hexo博客根目录的source目录下添加一个名叫<code>CNAME</code>的文本文件，里面写上自定义域名，保存，部署，然后访问就可以了。</p><h2 id="Markdown文本编辑器推荐"><a href="#Markdown文本编辑器推荐" class="headerlink" title="Markdown文本编辑器推荐"></a>Markdown文本编辑器推荐</h2><ul><li><a href="https://atom.io/" target="_blank" rel="noopener">Atom</a></li><li><a href="https://www.sublimetext.com/" target="_blank" rel="noopener">Sublime Text3</a></li><li><a href="http://25.io/mou/" target="_blank" rel="noopener">Mou</a></li><li><a href="https://www.typora.io/" target="_blank" rel="noopener">Typora(Markdown从此丝般润滑)</a></li><li><a href="https://caret.io/" target="_blank" rel="noopener">Caret(基于Electron)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试日志 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
